<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	0. Mapper는 interface로 만들어야 함
	1. namespage : xml의 namespace는 인터페이스의 패키지명을 포함한 인터페이스명으로 지정
	2. id속성 : 인터페이스의 추상메서드명
	3. insert, update, delete 태그는 반환결과가 몇건이 처리 되었는지 숫자로 반환
-->
<mapper namespace="com.booking.boot.mapper.MemberMapper">

	<!-- 업데이트 -->
	<update id="updateMember">

		UPDATE 	member 

		SET		PASSWORD=#{password}, EMAIL=#{email}, PHONE_NUMBER=#{phone_number} 
		WHERE 	USER_ID=#{user_id}
	</update>
	
	<!-- 권한 추가 -->
	<insert id="insertRole">

		INSERT INTO member_roles VALUES (#{user_id}, 2, sysdate)

	</insert>
	
	<!-- 사용자 등록 -->
	<insert id="insertMember">

		INSERT INTO member (

		    USER_ID, USERNAME, PASSWORD, EMAIL, PHONE_NUMBER,
		    PROFILE_IMAGE_URL, CREATED_AT, LAST_LOGIN_AT, LOGIN_FAIL_COUNT, ACCOUNT_LOCKED
		) VALUES (
		    #{user_id}, #{username}, #{password}, #{email}, #{phone_number},
		    #{profile_image_url}, sysdate(), null, 0, 'N'
		)
	</insert>
	
	<!-- 
		#{}, ${} 파라메터 삽입
		객체 타입인 경우, 객체의 getter메서드 이용
			- 파라메터 안넣은 경우(null을 넣은경우)
			- 이름을 잘못쓴 경우
			- getter메서드가 없는경우
	-->
	<select id="login">
		select USER_ID, USERNAME, EMAIL, PHONE_NUMBER, PROFILE_IMAGE_URL
				, CREATED_AT, LAST_LOGIN_AT, LOGIN_FAIL_COUNT, ACCOUNT_LOCKED 
		from `member`
		where user_id = #{member.user_id}
		and password = #{member.password}
	</select>
	
	<!-- 권한 목록 조회 -->
	<select id="getRoles">
		SELECT 	ROLE_NAME
		  FROM 	member M, member_roles MR, roles R
		 WHERE 	M.USER_ID = MR.USER_ID
		   AND 	MR.ROLE_ID = R.ROLE_ID
		   AND 	M.USER_ID = #{user_id}
	</select>
	
	<update id="update_fail_count">
		update `member` 
		set LOGIN_FAIL_COUNT = LOGIN_FAIL_COUNT + 1 
		    , ACCOUNT_LOCKED = case when login_fail_count >= 4 then 'Y' else 'N' end
		where user_id = #{user_id}
	</update>
	
	<!-- 가입일 내림차순 정렬 후 페이징 처리 -->
	<select id="getList" parameterType="com.booking.boot.Dto.SearchDto" resultType="com.booking.boot.Dto.MemberDto">
		select * from `member`
		
		<where>
			<if test="searchField != '' and searchWord != ''">
				<!-- 필드인 경우 문자열 처리를 하지 않기 위해서 ${}로 감싸 준다 
				${searchField} like '%' || #{searchWord} || '%'
				-->
				<foreach collection="searchField.split('/')" item="field" open="(" close=")" separator="or">
	  				${field} LIKE CONCAT('%', #{searchWord}, '%')  					
  				</foreach>
			</if>
		</where>
		
		ORDER BY created_at DESC 
	  	LIMIT #{offset}, #{amount}
	</select>
	
	<select id="totalCnt" parameterType="com.booking.boot.Dto.SearchDto" resultType="int">
		select count(*) from `member`
		<where>
			<if test="searchField != '' and searchWord != ''">
				<!-- 필드인 경우 문자열 처리를 하지 않기 위해서 ${}로 감싸 준다 
				${searchField} like '%' || #{searchWord} || '%'
				-->
				<foreach collection="searchField.split('/')" item="field" open="(" close=")" separator="or">
	  				${field} LIKE CONCAT('%', #{searchWord}, '%')  					
  				</foreach>
			</if>
		</where>
	</select>
	
	
	<select id="checkId">
		select count(*) from `member` where user_id = #{user_id}
	</select>
	
	<!-- 추상메서드 -->
	<update id="updateAccountLock">
		<!-- 만약 N이면 Y로, Y이면 N으로 -->

		UPDATE member SET ACCOUNT_LOCKED=#{account_locked} WHERE USER_ID=#{user_id}

	</update>
	
</mapper> 
